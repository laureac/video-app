{"version":3,"sources":["components/youtube.js","components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","SearchBar","onSubmit","useState","searchTerm","setSearchTerm","Paper","elevation","style","padding","TextField","fullWidth","label","onChange","e","target","value","onKeyPress","event","key","video","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","marginRight","alt","src","snippet","thumbnails","medium","url","Typography","variant","title","videos","listOfVideos","map","VideoItem","id","videoId","container","spacing","VideoDetail","console","log","videoSrc","height","frameBorder","width","channelTitle","description","Date","publishTime","toDateString","App","setVideos","selectedVideo","setSelectedVideo","handleSubmit","a","youtube","get","params","part","maxResults","q","response","data","items","useEffect","VideoList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.411c1e90.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://www.googleapis.com/youtube/v3',\r\n});\r\n","import React, {useState} from 'react';\r\nimport { Paper, TextField } from \"@material-ui/core\";\r\n\r\nfunction SearchBar({onSubmit}) {\r\n\r\n    const [ searchTerm, setSearchTerm] = useState('');\r\n\r\n    const handleChange = (e) =>{\r\n        setSearchTerm(e.target.value)\r\n    }\r\n    const onKeyPress = (event) => {\r\n        if (event.key === \"Enter\") {\r\n            onSubmit(searchTerm);\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n           <Paper elevation={6} style={{ padding: \"25px\" }}>\r\n                <TextField\r\n                    fullWidth\r\n                    label=\"Search...\"\r\n                    onChange={handleChange}\r\n                    onKeyPress={onKeyPress}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\r\n\r\nexport default ({ video, onVideoSelect }) => {\r\n  return (\r\n    <Grid item xs={12} >\r\n      <Paper style={{ display: \"flex\", alignItems: \"center\", cursor: \"pointer\"}} onClick={() => onVideoSelect(video)} >\r\n        <img style={{ marginRight: \"20px\" }} alt=\"thumbnail\" src={video.snippet.thumbnails.medium.url} />\r\n        <Typography variant=\"subtitle1\">\r\n          <b>{video.snippet.title}</b>\r\n        </Typography>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport VideoItem from \"./VideoItem\";\r\n\r\nexport default ({ videos, onVideoSelect }) => {\r\n  const listOfVideos = videos.map(video => (\r\n    <VideoItem\r\n      onVideoSelect={onVideoSelect}\r\n      key={video.id.videoId}\r\n      video={video}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {listOfVideos}\r\n    </Grid>\r\n  );\r\n};","import React from 'react';\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nfunction VideoDetail({ video }) {\r\n    if (!video) return <div>Loading...</div>;\r\n    console.log(video)\r\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n    \r\n    return (\r\n        <div>\r\n            <Paper elevation={6} style={{ height: \"450px\" }}>\r\n                <iframe\r\n                frameBorder=\"0\"\r\n                height=\"100%\"\r\n                width=\"100%\"\r\n                title=\"Video Player\"\r\n                src={videoSrc}\r\n                />\r\n            </Paper>\r\n            <Paper elevation={6} style={{ padding: \"15px\" }}>\r\n                <Typography variant=\"h4\"> {video.snippet.title}</Typography>\r\n                <Typography variant=\"subtitle1\">{video.snippet.channelTitle} </Typography>\r\n                <Typography variant=\"subtitle2\">{video.snippet.description} - {new Date(video.snippet.publishTime).toDateString()}</Typography>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoDetail;","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport { Grid } from '@material-ui/core';\nimport youtube from './components/youtube';\nimport SearchBar from './components/SearchBar';\nimport  VideoList  from \"./components/VideoList\";\nimport VideoDetail  from \"./components/VideoDetail\";\n\nfunction App() {\n\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  async function handleSubmit(searchTerm) {\n    const response = await youtube.get(\"search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 5,\n        key: 'AIzaSyA3q1rrWjliZPTLhiYAr46ZJAUmKgD2iTg',\n        q: searchTerm,\n      }\n    }\n    );\n    const videos = response.data.items\n    setVideos(videos);\n    setSelectedVideo(videos[0]);\n  }\n  useEffect(()=>{\n    handleSubmit('cat being jerks')\n  }, [])\n\n  return (\n\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n          <SearchBar onSubmit={handleSubmit} />\n          </Grid>\n          <Grid item xs={8}>\n            <VideoDetail video={selectedVideo}/>\n          </Grid>\n          <Grid item xs={4}>\n            <VideoList videos={videos} onVideoSelect={setSelectedVideo}/>\n          </Grid>\n        </Grid>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}